// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sessionup

import (
	"context"
	"sync"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked Store
//         mockedStore := &StoreMock{
//             CreateFunc: func(ctx context.Context, s Session) error {
// 	               panic("mock out the Create method")
//             },
//             DeleteByIDFunc: func(ctx context.Context, id string) error {
// 	               panic("mock out the DeleteByID method")
//             },
//             DeleteByIDAndUserKeyFunc: func(ctx context.Context, id string, key string) error {
// 	               panic("mock out the DeleteByIDAndUserKey method")
//             },
//             DeleteByUserKeyFunc: func(ctx context.Context, key string, expID ...string) error {
// 	               panic("mock out the DeleteByUserKey method")
//             },
//             FetchByIDFunc: func(ctx context.Context, id string) (Sessions, error) {
// 	               panic("mock out the FetchByID method")
//             },
//             FetchByUserKeyFunc: func(ctx context.Context, key string) (Sessions, error) {
// 	               panic("mock out the FetchByUserKey method")
//             },
//         }
//
//         // use mockedStore in code that requires Store
//         // and then make assertions.
//
//     }
type StoreMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, s Session) error

	// DeleteByIDFunc mocks the DeleteByID method.
	DeleteByIDFunc func(ctx context.Context, id string) error

	// DeleteByIDAndUserKeyFunc mocks the DeleteByIDAndUserKey method.
	DeleteByIDAndUserKeyFunc func(ctx context.Context, id string, key string) error

	// DeleteByUserKeyFunc mocks the DeleteByUserKey method.
	DeleteByUserKeyFunc func(ctx context.Context, key string, expID ...string) error

	// FetchByIDFunc mocks the FetchByID method.
	FetchByIDFunc func(ctx context.Context, id string) (Sessions, error)

	// FetchByUserKeyFunc mocks the FetchByUserKey method.
	FetchByUserKeyFunc func(ctx context.Context, key string) (Sessions, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// S is the s argument value.
			S Session
		}
		// DeleteByID holds details about calls to the DeleteByID method.
		DeleteByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// DeleteByIDAndUserKey holds details about calls to the DeleteByIDAndUserKey method.
		DeleteByIDAndUserKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Key is the key argument value.
			Key string
		}
		// DeleteByUserKey holds details about calls to the DeleteByUserKey method.
		DeleteByUserKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// ExpID is the expID argument value.
			ExpID []string
		}
		// FetchByID holds details about calls to the FetchByID method.
		FetchByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// FetchByUserKey holds details about calls to the FetchByUserKey method.
		FetchByUserKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
	}
	lockCreate               sync.RWMutex
	lockDeleteByID           sync.RWMutex
	lockDeleteByIDAndUserKey sync.RWMutex
	lockDeleteByUserKey      sync.RWMutex
	lockFetchByID            sync.RWMutex
	lockFetchByUserKey       sync.RWMutex
}

// Create calls CreateFunc.
func (mock *StoreMock) Create(ctx context.Context, s Session) error {
	if mock.CreateFunc == nil {
		panic("StoreMock.CreateFunc: method is nil but Store.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		S   Session
	}{
		Ctx: ctx,
		S:   s,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, s)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedStore.CreateCalls())
func (mock *StoreMock) CreateCalls() []struct {
	Ctx context.Context
	S   Session
} {
	var calls []struct {
		Ctx context.Context
		S   Session
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByID calls DeleteByIDFunc.
func (mock *StoreMock) DeleteByID(ctx context.Context, id string) error {
	if mock.DeleteByIDFunc == nil {
		panic("StoreMock.DeleteByIDFunc: method is nil but Store.DeleteByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteByID.Lock()
	mock.calls.DeleteByID = append(mock.calls.DeleteByID, callInfo)
	mock.lockDeleteByID.Unlock()
	return mock.DeleteByIDFunc(ctx, id)
}

// DeleteByIDCalls gets all the calls that were made to DeleteByID.
// Check the length with:
//     len(mockedStore.DeleteByIDCalls())
func (mock *StoreMock) DeleteByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDeleteByID.RLock()
	calls = mock.calls.DeleteByID
	mock.lockDeleteByID.RUnlock()
	return calls
}

// DeleteByIDAndUserKey calls DeleteByIDAndUserKeyFunc.
func (mock *StoreMock) DeleteByIDAndUserKey(ctx context.Context, id string, key string) error {
	if mock.DeleteByIDAndUserKeyFunc == nil {
		panic("StoreMock.DeleteByIDAndUserKeyFunc: method is nil but Store.DeleteByIDAndUserKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
		Key string
	}{
		Ctx: ctx,
		ID:  id,
		Key: key,
	}
	mock.lockDeleteByIDAndUserKey.Lock()
	mock.calls.DeleteByIDAndUserKey = append(mock.calls.DeleteByIDAndUserKey, callInfo)
	mock.lockDeleteByIDAndUserKey.Unlock()
	return mock.DeleteByIDAndUserKeyFunc(ctx, id, key)
}

// DeleteByIDAndUserKeyCalls gets all the calls that were made to DeleteByIDAndUserKey.
// Check the length with:
//     len(mockedStore.DeleteByIDAndUserKeyCalls())
func (mock *StoreMock) DeleteByIDAndUserKeyCalls() []struct {
	Ctx context.Context
	ID  string
	Key string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		Key string
	}
	mock.lockDeleteByIDAndUserKey.RLock()
	calls = mock.calls.DeleteByIDAndUserKey
	mock.lockDeleteByIDAndUserKey.RUnlock()
	return calls
}

// DeleteByUserKey calls DeleteByUserKeyFunc.
func (mock *StoreMock) DeleteByUserKey(ctx context.Context, key string, expID ...string) error {
	if mock.DeleteByUserKeyFunc == nil {
		panic("StoreMock.DeleteByUserKeyFunc: method is nil but Store.DeleteByUserKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		ExpID []string
	}{
		Ctx:   ctx,
		Key:   key,
		ExpID: expID,
	}
	mock.lockDeleteByUserKey.Lock()
	mock.calls.DeleteByUserKey = append(mock.calls.DeleteByUserKey, callInfo)
	mock.lockDeleteByUserKey.Unlock()
	return mock.DeleteByUserKeyFunc(ctx, key, expID...)
}

// DeleteByUserKeyCalls gets all the calls that were made to DeleteByUserKey.
// Check the length with:
//     len(mockedStore.DeleteByUserKeyCalls())
func (mock *StoreMock) DeleteByUserKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	ExpID []string
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		ExpID []string
	}
	mock.lockDeleteByUserKey.RLock()
	calls = mock.calls.DeleteByUserKey
	mock.lockDeleteByUserKey.RUnlock()
	return calls
}

// FetchByID calls FetchByIDFunc.
func (mock *StoreMock) FetchByID(ctx context.Context, id string) (Sessions, error) {
	if mock.FetchByIDFunc == nil {
		panic("StoreMock.FetchByIDFunc: method is nil but Store.FetchByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFetchByID.Lock()
	mock.calls.FetchByID = append(mock.calls.FetchByID, callInfo)
	mock.lockFetchByID.Unlock()
	return mock.FetchByIDFunc(ctx, id)
}

// FetchByIDCalls gets all the calls that were made to FetchByID.
// Check the length with:
//     len(mockedStore.FetchByIDCalls())
func (mock *StoreMock) FetchByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockFetchByID.RLock()
	calls = mock.calls.FetchByID
	mock.lockFetchByID.RUnlock()
	return calls
}

// FetchByUserKey calls FetchByUserKeyFunc.
func (mock *StoreMock) FetchByUserKey(ctx context.Context, key string) (Sessions, error) {
	if mock.FetchByUserKeyFunc == nil {
		panic("StoreMock.FetchByUserKeyFunc: method is nil but Store.FetchByUserKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFetchByUserKey.Lock()
	mock.calls.FetchByUserKey = append(mock.calls.FetchByUserKey, callInfo)
	mock.lockFetchByUserKey.Unlock()
	return mock.FetchByUserKeyFunc(ctx, key)
}

// FetchByUserKeyCalls gets all the calls that were made to FetchByUserKey.
// Check the length with:
//     len(mockedStore.FetchByUserKeyCalls())
func (mock *StoreMock) FetchByUserKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFetchByUserKey.RLock()
	calls = mock.calls.FetchByUserKey
	mock.lockFetchByUserKey.RUnlock()
	return calls
}
